set nocompatible                              "关闭VI兼容模式
let mapleader=","                             "将<leader>换为,
if !has('win32')
    source ~/.vim/bundles.vim
endif
filetype plugin indent on                     "自动识别文件类型，用文件类型的plugin脚本，用对应的缩进定义

"ack "{{{
let g:ack_default_options = ' -s -H --nocolor --nogroup --column --ignore-dir=logs '
"let g:ackpreview = 1
"}}}

"airline及状态栏设置 "{{{
let g:airline_left_sep='>'
let g:airline_right_sep='<'
set laststatus=2                              "始终显示状态栏
set showmode                                  "在左下角显示当前模式
set ruler                                     "在右下角显示当前光标位置
set showcmd                                   "在右下角显示当前已输入但还未执行的命令
"}}}

"ctrlp "{{{
let g:ctrlp_working_path_mode = 'raw'
let g:ctrlp_match_window = 'bottom,order:ttb,min:10,max:10,results:1000'
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_open_multiple_files = 'v'
let g:ctrlp_arg_map = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn))|(node_modules|static)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
  \ },
  \ 'fallback': 'find %s -type f'
\ }
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
"}}}

"DoxygenToolkit "{{{
let g:DoxygenToolkit_authorName="吕翔<lx_kkudng@163.com>"
"}}}

"easy-motion "{{{
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader>l <Plug>(easymotion-overwin-line)
nmap <space> <Plug>(easymotion-overwin-f2)
"}}}

"indentLine及自动对齐设置 "{{{
"将对齐线的颜色改为灰色
let g:indentLine_color_tty_dark = 59
set autoindent                                "自动对齐
"}}}

"neocomplcache "{{{
"let g:neocomplcache_enable_at_startup = 1
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"}}}

"nerdcommenter "{{{
nmap <leader>x <plug>NERDCommenterToggle
xmap <leader>x <plug>NERDCommenterToggle
let NERDCompactSexyComs=1
"}}}

"syntastic "{{{
let g:syntastic_css_checkers = ['prettycss']
let g:syntastic_python_checkers = ['python']
"}}}

"tabular "{{{
vmap <leader>t- :Tabularize /-<CR>
vmap <leader>t= :Tabularize /=<CR>
vmap <leader>t> :Tabularize /=><CR>
vmap <leader>t? :Tabularize /
"}}}

"tagbar "{{{
"用F6呼起Tagbar插件
nmap <silent> <F6> :TagbarToggle<CR>
let g:tagbar_left = 1
let g:tagbar_width = 30
"}}}

"vim-expand-region "{{{
map L <Plug>(expand_region_expand)
map H <Plug>(expand_region_shrink)
call expand_region#custom_text_objects({
            \ "\/\\n\\n\<CR>": 1,
            \ 'a]' :1,
            \ 'ab' :1,
            \ 'a''' :1,
            \ 'aB' :1,
            \ 'ii' :0,
            \ 'ai' :0,
            \ })
"}}}

"vim-fugitive "{{{
if isdirectory(expand("~/.vim/bundle/vim-fugitive/"))
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
endif
"}}}

"vim-trailing-whitespace "{{{
"自动删除行尾空格
nnoremap <silent> <F8> :FixWhitespace<CR>
"}}}

"搜索设置 "{{{
set hlsearch                                  "搜索高亮
set incsearch                                 "搜索追踪
set ignorecase                                "忽略大小写$
set smartcase                                 "当查询串中有至少一个大写字母时对大小写敏感
set report=0                                  "显示被替换的次数
"普通模式下按<c-l>取消搜索高亮
nnoremap <silent> <C-l> :nohl<CR><C-l>
"}}}

"缩进设置 "{{{
set smartindent                               "智能缩进
set tabstop=4                                 "缩进量
set shiftwidth=4                              "缩进值，用<<和>>的缩进量
set expandtab                                 "把制表符换为空格
"}}}

"配色方案相关 "{{{
set t_Co=256                                  "256位色模式
colorscheme molokai                           "配色方案
syntax on                                     "语法高亮
"}}}

"特殊字符设置 "{{{
set list                                      "显示特殊字符
set listchars=tab:>-,eol:$                    "需要显示的特殊字符，tab显示为>----, 换行显示为$
set ambiwidth=double                          "把所有的不明宽度字符的宽度设为两个字符
"}}}

"光标设置 "{{{
set so=5                                      "在光标上下各留5行
set selection=inclusive                       "可视模式下将当前光标所在的字符选中
set backspace=indent,start                    "允许用退格符删除回车符
set cursorline cursorcolumn                   "高亮光标所在行和列
au WinLeave * set nocursorline nocursorcolumn "进入窗口的时候高亮所在的行和列
au WinEnter * set cursorline cursorcolumn     "离开窗口的时候取消对光标所在行和列的高亮
"}}}

"折叠设置 "{{{
set foldmethod=marker                         "按照折叠符号折叠
set foldcolumn=1                              "行首显示折叠标识的空格数
"}}}

"系统设置"{{{
set nobackup                                  "关闭自动备份
set mouse=                                    "关闭鼠标
set helplang=cn                               "帮助文档语言
"set autochdir                                 "自动将pwd切换为当前文件所在的目录
set showmatch                                 "显示对应的半个括号位置
set matchpairs+=<:>                           "添加对html的括号匹配
set nu                                        "显示行号
set wrap                                      "自动折行
set winaltkeys=no                             "在windows下禁用菜单alt键，使得alt可以使用
set confirm                                   "关闭未保存的文件时提示
"set iskeyword+=$,%,#,-                        "碰到这些字符是时候仍然认为是一个词
set visualbell                                "使用显示提醒代替beep响声
"}}}

"文件编码相关的设置 "{{{
set fileencodings=utf-8,chinese               "文件编码扫描类型
if has ('win32')
    set clipboard+=unnamed                    "与windows共享剪切板
    set title
else
    set fileencoding=utf-8                    "强制将文件编码转为utf8
    set encoding=utf-8                        "当前终端输入的编码
endif
"}}}

"自动补全 "{{{
set completeopt=preview,menu                  "自动补全时出最长无分歧的字符串和menu列表
let g:SuperTabRetainCompletionType=2
let g:SuperTabDefaultCompletionType="<C-N>"
"}}}

"选择快捷键组 "{{{
"map vi' <Esc>?'<CR>lv/'<CR>h
"map vi" <Esc>?"<CR>lv/"<CR>h
"map va' <Esc>?'<CR>v/'<CR>
"map va" <Esc>?"<CR>v/"<CR>
"map vix <Esc>?><CR>lv/<<CR>h
"map vi= <ESC>?\s\+\S\+\s*=\s*\S\+<CR>lv/=<CR>/\S<CR>/[\s<>\n]<CR>h
"map vi/ <Esc>?\/<CR>l<Esc>v/\/<CR>h
"map vt) <ESC>v/)<CR>h
"map vt' <ESC>v/'<CR>h
"map vt" <ESC>v/"<CR>h
"map vt; <ESC>v/;<CR>h
"map vt, <ESC>v/,<CR>h
"map vt} <ESC>v/}<CR>h
"}}}

" 在插入模式下使用光标移动指令 "{{{
" 需要修改xshell的keyboard配置Backspace为ASCII 127
"inoremap <C-h> <Left>
"inoremap <C-j> <Down>
"inoremap <C-k> <Up>
"inoremap <C-l> <Right>
"}}}

"php文件的特殊设置 "{{{
autocmd FileType php :call PhpKeys()
function! PhpKeys()
    "php文件的缩进
    "let php_folding=0
    "set foldmethod=manual
    "EnablePHPFolds
    vmap <silent> <leader>j yoecho json_encode(<ESC>pa, true);<ESC><CR>
    vmap <silent> <leader>v yovar_dump (<ESC>pa);<ESC><CR>
    nnoremap <F10> :w<CR>:!php %<CR>
    nnoremap <silent> <leader>p a<?php  ?><ESC>2hi
    set iskeyword+=$
    "set foldmethod=syntax                         "按照折叠符号折叠
    "set foldlevel=1
    "set foldnestmax=2
endfunction
"}}}

"python 文件的设置"{{{
autocmd FileType python :call PythonKeys()
function! PythonKeys()
    nnoremap <F10> :w<CR>:!python %<CR>
    "set foldmethod=indent
    "set foldlevel=2
endfunction
"}}}

"css文件的特殊配置"{{{
augroup VimCSS3Syntax
    autocmd!
    autocmd FileType css setlocal iskeyword+=-
augroup END
"}}}

"多标签 "{{{
"if v:version >= 700
    "map <C-w>p :tabprevious<CR>
    "map <C-w>n :tabnext<CR>
    "nmap <C-w>t :tabnew<CR>
"endif
"}}}

"第81和101列高亮 "{{{
if v:version >=703
    set cc=81,101
else
    hi ColorColumn ctermbg=red
    au BufNewFile,BufRead *.* match ColorColumn /\%<82v.\%>81v/
endif
"}}}

"0和^的作用互换 "{{{
"0到首个非空字符，^到行首
nnoremap 0 ^
nnoremap ^ 0
"}}}

"图形界面设定 "{{{
if has("gui_running")
    set guioptions-=m " 隐藏菜单栏
    set guioptions-=T " 隐藏工具栏
    set guioptions-=L " 隐藏左侧滚动条
    set guioptions-=r " 隐藏右侧滚动条
    set guioptions-=b " 隐藏底部滚动条
    set showtabline=0 " 隐藏Tab栏
    if has("win32")
        set guifont=Ubuntu\ Mono:h12        "字体字号
        autocmd GUIEnter * simalt ~x        "windows 下 gvim 启动时最大化
    elseif has("mac")
        set guifont=Ubuntu\ Mono:h20        "字体字号
        set lines=35                        "窗口打开时的行数
        set columns=129                     "窗口打开时的列数
    else
        set guifont=Ubuntu\ Mono:h12        "字体字号
    endif
endif
"}}}

"粘贴模式 "{{{
set pastetoggle=<F12>                         "F12作为粘贴模式的转换键
au InsertLeave * set nopaste                  "退出插入模式的时候退出粘贴模式
"}}}

"快速查找 "{{{
nmap <silent> <leader>f :call MyGrep("normal")<CR>
vmap <silent> <leader>f :call MyGrep("visual")<CR>
function! MyGrep(mode) "{{{
    if a:mode == "normal"
        let l:word=expand("<cword>")
    endif
    if a:mode == "visual"
        let l:word=eval('y')
    endif
    execute "Ack ". l:word
    exec 'cw'
endfunction "}}}
"}}}

"自动补全忽略的文件 "{{{
set wildignore+=*.log*,*.svn
set wildignore+=*.aux,*.out,*.toc " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif " binary images
set wildignore+=*.luac " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.pyc " Python byte code
set wildignore+=*.spl " compiled spelling word lists
set wildignore+=*.sw? " Vim swap files
set wildignore+=*.min.js,*.min.css,*.css.map
"}}}

"调整窗口宽高 "{{{
"map <silent> + :res +3<CR>
"map <silent> _ :res -3<CR>
map <silent> <Up> <C-W>+
map <silent> <Down> <C-W>-
map <silent> <Left> <C-W><
map <silent> <Right> <C-W>>
"}}}

"快捷键添加注释 "{{{
nmap <silent> <leader>tl A//written by LX<ESC>
nmap <silent> <leader>tn o//written by LX<ESC>
"}}}

"文件格式整理 "{{{
"快捷键自动对齐
nmap <silent> <F7> msgg=G'sdms :w<cr>
"修改文件编码为unix并去掉^M
nmap <silent> <Leader>u :set fileformat=unix<CR>:%s/\r/<CR>
"强制保存只读文件
command! -nargs=0 W :w !sudo tee % > /dev/null
"}}}

"通用快捷键 "{{{
"重新载入vimrc
nnoremap <F11> :source ~/.vimrc<CR>
"插入模式下连续两次j为esc
"inoremap jj <esc>
"将Y映射成选中当前位置到行尾
nmap Y y$
"}}}

"持久撤消 "{{{
set undofile
set undodir=~/backup/vim/\_undodir
set undolevels=1000 "maximum number of changes that can be undone
"set history=100                               "保留1000次历史
"}}}

"导入 in.vim 配置"{{{
if filereadable('in.vim')
    source in.vim
endif
"}}}

"PHP高亮"{{{
"function! PhpSyntaxOverride()
  "hi! def link phpDocTags  phpDefine
  "hi! def link phpDocParam phpType
"endfunction

"augroup phpSyntaxOverride
  "autocmd!
  "autocmd FileType php call PhpSyntaxOverride()
"augroup END
"}}}

"matchtagalways配置"{{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'php' : 1,
    \}
"}}}

" youcompleteme 配置{{{
let g:ycm_python_binary_path = 'python'
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>d  :YcmCompleter GoToDefinitionElseDeclaration<CR>
map <leader>r  :YcmCompleter GoToReferences<CR>
"}}}

" 高亮行列{{{
if &t_Co > 255
   hi Visual                      ctermbg=240
endif"}}}
